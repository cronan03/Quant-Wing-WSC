import pandas as pd
import numpy as np
import sklearn.metrics as metrics
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split
from sklearn.linear_model import Ridge
from sklearn.preprocessing import MinMaxScaler
from sklearn.linear_model import LinearRegression

csv_file_path =r"D:\CRONAN\Train_quant_ass2.csv"
data = pd.read_csv(csv_file_path)

def moving_average(data, column, window_size):
    return data[column].rolling(window=window_size).mean()

def RSI(data, column, period=14):
    delta = data[column].diff(1)
    gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
    RS = gain / loss
    return 100 - (100 / (1 + RS))

def MACD(data, column, slow=26, fast=12):
    exp1 = data[column].ewm(span=fast, adjust=False).mean()
    exp2 = data[column].ewm(span=slow, adjust=False).mean()
    macd = exp1 - exp2
    return macd

data['MA50_Close'] = moving_average(data, 'price', 50)
data['RSI_Close'] = RSI(data, 'price')
data['MACD_Close'] = MACD(data, 'price')

num_lags = 5  
for i in range(1, num_lags + 1):
    data[f'Close_Lag_{i}'] = data['price'].shift(i)

financial_features = ['liabilities', 'equity', 'total_assets', 'current_assets', 'current_liabilities',
                       'total_revenue', 'net_income', 'dividend', 'shares_outstanding', 'price']

for feature in financial_features:
    data[f'MA50_{feature}'] = moving_average(data, feature, 50)
    data[f'RSI_{feature}'] = RSI(data, feature)
    data[f'MACD_{feature}'] = MACD(data, feature)

data.dropna(inplace=True)
data["momentum"] = data["MA50_Close"] * data["RSI_Close"]

numeric_data = data.select_dtypes(include=[np.number])
scaler = MinMaxScaler() 
data_scaled = scaler.fit_transform(numeric_data)

features = ["MA50_Close", "RSI_Close", "momentum", "Close_Lag_1", "MA50_total_revenue"]

X = data_scaled
y = data["price"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = LinearRegression()
model.fit(X_train, y_train)
prediction = model.predict(X_test)

mse = mean_squared_error(y_test, prediction)
print(f"MSE: {mse}")
